import requests
from bs4 import BeautifulSoup
from urllib.parse import urljoin
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas

# PDF report initialization
def generate_report(results, filename="Vulnerability_Report.pdf"):
    pdf = canvas.Canvas(filename, pagesize=letter)
    pdf.setTitle("Vulnerability Scan Report")
    pdf.drawString(100, 750, "Web Application Vulnerability Report")
    y = 720
    for vuln, (status, level) in results.items():
        pdf.drawString(80, y, f"{vuln}: {status} (Risk: {level})")
        y -= 20
    pdf.save()
    print(f"\n[âœ”] PDF report saved as {filename}")

# SQL Injection Test
def check_sql_injection(url):
    test_payloads = ["' OR '1'='1", '" OR "1"="1', "'--", "' OR 1=1 --"]
    vulnerable = False
    for payload in test_payloads:
        test_url = f"{url}?id={payload}"
        res = requests.get(test_url)
        if any(error in res.text.lower() for error in ["sql", "syntax", "mysql", "native client"]):
            vulnerable = True
            break
    return ("Vulnerable" if vulnerable else "Safe", "High" if vulnerable else "Low")

# XSS Test
def check_xss(url):
    payload = "<script>alert(1)</script>"
    res = requests.get(f"{url}?q={payload}")
    if payload in res.text:
        return ("Vulnerable", "High")
    return ("Safe", "Low")

# Clickjacking Test
def check_clickjacking(url):
    headers = requests.get(url).headers
    if "X-Frame-Options" not in headers:
        return ("Vulnerable", "Medium")
    return ("Safe", "Low")

# Security Headers Test
def check_security_headers(url):
    expected_headers = [
        "Content-Security-Policy",
        "Strict-Transport-Security",
        "X-Content-Type-Options",
        "X-Frame-Options",
        "Referrer-Policy",
        "Permissions-Policy"
    ]
    res = requests.get(url)
    missing = [h for h in expected_headers if h not in res.headers]
    if missing:
        return (f"Missing: {', '.join(missing)}", "Medium")
    return ("All present", "Low")

# Open Redirect Test
def check_open_redirect(url):
    test_url = url + "/redirect?url=https://evil.com"
    res = requests.get(test_url, allow_redirects=False)
    if "Location" in res.headers and "evil.com" in res.headers["Location"]:
        return ("Vulnerable", "High")
    return ("Safe", "Low")

# CSRF Token Test (basic)
def check_csrf(url):
    try:
        res = requests.get(url)
        soup = BeautifulSoup(res.text, 'html.parser')
        forms = soup.find_all('form')
        for form in forms:
            inputs = form.find_all('input')
            if not any("csrf" in inp.get("name", "").lower() for inp in inputs):
                return ("Missing CSRF Token", "Medium")
        return ("Token Present", "Low")
    except Exception as e:
        return (f"Error: {str(e)}", "Low")

# Main Function
def scan(url):
    print(f"\n[+] Scanning {url} for vulnerabilities...\n")
    results = {}
    results["SQL Injection"] = check_sql_injection(url)
    results["XSS"] = check_xss(url)
    results["Clickjacking"] = check_clickjacking(url)
    results["Open Redirect"] = check_open_redirect(url)
    results["Security Headers"] = check_security_headers(url)
    results["CSRF"] = check_csrf(url)

    print("\n--- Scan Results ---")
    for vuln, (status, risk) in results.items():
        print(f"{vuln}: {status} (Risk: {risk})")

    generate_report(results)

# Run the script
if __name__ == "__main__":
    target_url = input("Enter the target URL (e.g., http://example.com): ")
    scan(target_url)
